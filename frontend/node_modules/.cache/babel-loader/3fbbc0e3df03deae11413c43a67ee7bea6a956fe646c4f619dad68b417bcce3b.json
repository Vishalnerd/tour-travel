{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const res = await fetch(url);\n\n        // Check if the content type is JSON\n        const contentType = res.headers.get('content-type');\n        if (!res.ok) {\n          throw new Error('Failed to fetch');\n        } else if (!contentType || !contentType.includes('application/json')) {\n          throw new Error('Received non-JSON response');\n        }\n        const result = await res.json();\n        setData(result.data);\n      } catch (error) {\n        setError(error.message);\n        console.error(\"Fetch error:\", error); // Log the error for debugging\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    error,\n    loading\n  };\n};\n_s(useFetch, \"6nhoqVvctpRRYiww7uwVz/g7/BM=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","error","setError","loading","setLoading","fetchData","res","fetch","contentType","headers","get","ok","Error","includes","result","json","message","console"],"sources":["C:/Users/Vishal/Desktop/tour-travel/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const res = await fetch(url);\r\n\r\n        // Check if the content type is JSON\r\n        const contentType = res.headers.get('content-type');\r\n        if (!res.ok) {\r\n          throw new Error('Failed to fetch');\r\n        } else if (!contentType || !contentType.includes('application/json')) {\r\n          throw new Error('Received non-JSON response');\r\n        }\r\n\r\n        const result = await res.json();\r\n        setData(result.data);\r\n      } catch (error) {\r\n        setError(error.message);\r\n        console.error(\"Fetch error:\", error); // Log the error for debugging\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, error, loading };\r\n};\r\n\r\nexport default useFetch;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,YAAY;MAC5BD,UAAU,CAAC,IAAI,CAAC;MAEhB,IAAI;QACF,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAG,CAAC;;QAE5B;QACA,MAAMU,WAAW,GAAGF,GAAG,CAACG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QACnD,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;QACpC,CAAC,MAAM,IAAI,CAACJ,WAAW,IAAI,CAACA,WAAW,CAACK,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UACpE,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,MAAME,MAAM,GAAG,MAAMR,GAAG,CAACS,IAAI,EAAE;QAC/Bf,OAAO,CAACc,MAAM,CAACf,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACe,OAAO,CAAC;QACvBC,OAAO,CAAChB,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC,CAAC,CAAC;MACxC,CAAC,SAAS;QACRG,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,SAAS,EAAE;EACb,CAAC,EAAE,CAACP,GAAG,CAAC,CAAC;EAET,OAAO;IAAEC,IAAI;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AACjC,CAAC;AAAC,GAlCIN,QAAQ;AAoCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}