{"ast":null,"code":"\"use client\";\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/InView.tsx\nimport * as React from \"react\";\n\n// src/observe.ts\nvar observerMap = /* @__PURE__ */new Map();\nvar RootIds = /* @__PURE__ */new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = void 0;\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\nfunction getRootId(root) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== void 0).map(key => {\n    return `${key}_${key === \"root\" ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\nfunction createObserver(options) {\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n  if (!instance) {\n    const elements = /* @__PURE__ */new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _a;\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold);\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          entry.isVisible = inView;\n        }\n        (_a = elements.get(entry.target)) == null ? void 0 : _a.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\nfunction observe(element, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n  if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== void 0) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {};\n  }\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\n// src/InView.tsx\nfunction isPlainChildren(props) {\n  return typeof props.children !== \"function\";\n}\nvar InView = class extends React.Component {\n  constructor(props) {\n    super(props);\n    __publicField(this, \"node\", null);\n    __publicField(this, \"_unobserveCb\", null);\n    __publicField(this, \"handleNode\", node => {\n      if (this.node) {\n        this.unobserve();\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: void 0\n          });\n        }\n      }\n      this.node = node ? node : null;\n      this.observeNode();\n    });\n    __publicField(this, \"handleChange\", (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        this.unobserve();\n      }\n      if (!isPlainChildren(this.props)) {\n        this.setState({\n          inView,\n          entry\n        });\n      }\n      if (this.props.onChange) {\n        this.props.onChange(inView, entry);\n      }\n    });\n    this.state = {\n      inView: !!props.initialInView,\n      entry: void 0\n    };\n  }\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n  componentWillUnmount() {\n    this.unobserve();\n  }\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    if (typeof children === \"function\") {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n    return React.createElement(as || \"div\", {\n      ref: this.handleNode,\n      ...props\n    }, children);\n  }\n};\n\n// src/useInView.tsx\nimport * as React2 from \"react\";\nfunction useInView() {\n  let {\n    threshold,\n    delay,\n    trackVisibility,\n    rootMargin,\n    root,\n    triggerOnce,\n    skip,\n    initialInView,\n    fallbackInView,\n    onChange\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a;\n  const [ref, setRef] = React2.useState(null);\n  const callback = React2.useRef();\n  const [state, setState] = React2.useState({\n    inView: !!initialInView,\n    entry: void 0\n  });\n  callback.current = onChange;\n  React2.useEffect(() => {\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        unobserve();\n        unobserve = void 0;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_a = state.entry) == null ? void 0 : _a.target;\n  const previousEntryTarget = React2.useRef();\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: void 0\n    });\n  }\n  const result = [setRef, state.inView, state.entry];\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"mappings":"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","names":["React","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","InView","constructor","__publicField","node","triggerOnce","skip","setState","initialInView","observeNode","onChange","state","componentDidMount","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_unobserveCb","handleChange","render","ref","handleNode","as","useInView","setRef","React2","current","entryTarget","_a","previousEntryTarget","result"],"sources":["C:\\Users\\Vishal\\Desktop\\tour-travel\\frontend\\node_modules\\react-intersection-observer\\src\\InView.tsx","C:\\Users\\Vishal\\Desktop\\tour-travel\\frontend\\node_modules\\react-intersection-observer\\src\\observe.ts","C:\\Users\\Vishal\\Desktop\\tour-travel\\frontend\\node_modules\\react-intersection-observer\\src\\useInView.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}